{"version":3,"sources":["components/Nav.js","components/Course.js","components/CourseList.js","App1.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","AppBar_default","position","Toolbar_default","Typography_default","variant","color","Course","props","course","Card_default","CardMedia_default","style","height","paddingTop","image","fields","img","title","CardContent_default","gutterBottom","component","description","CardActions_default","Button_default","size","href","url","target","client","contentful","space","accessToken","CourseList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","courses","searchString","getCourses","getEntries","content_type","query","then","response","setState","items","catch","error","console","log","onSearchInputChange","event","value","TextField_default","padding","width","id","placeholder","margin","onChange","Grid_default","container","spacing","map","currentCourse","item","xs","sm","lg","xl","components_Course","Component","App1","_Component","apply","arguments","inherits","createClass","key","components_Nav","components_CourseList","Boolean","window","location","hostname","match","ReactDOM","render","src_App1","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7edbbbb5.chunk.js","sourcesContent":["import React from 'react'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nconst Nav = () =>\r\n{\r\n    return(\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"title\" color=\"inherit\">\r\n                        Vanna Tomo\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\nexport default Nav;","import React from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nconst Course = (props) =>\r\n{\r\n    return(\r\n        <div>{props.course?(\r\n            <Card>\r\n                <CardMedia style={{height:0,paddingTop:'56.25%'}}\r\n                    image={props.course.fields.img}\r\n                    title={props.course.fields.title}\r\n                >\r\n                </CardMedia>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"headline\" component=\"h2\">\r\n                        {props.course.fields.title}\r\n                    </Typography>\r\n                    <Typography component=\"p\">\r\n                        {props.course.fields.description}\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button size=\"small\" color=\"primary\" href={props.course.fields.url} target=\"_blank\">\r\n                        Go to Course\r\n                    </Button>\r\n                    \r\n                </CardActions>\r\n            </Card>\r\n        ):null}</div>\r\n    )\r\n}\r\nexport default Course;","import React, { Component } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport * as contentful from 'contentful'\r\nimport Course from '../components/Course'\r\n\r\nconst SPACE_ID='3h766nleapg8'\r\nconst ACCESS_TOKEN='19430e43ea2aa36682731ee4d7db1e3572a928c0941934c2cb551fab11582124'\r\n\r\nconst client = contentful.createClient({\r\n    space: SPACE_ID,\r\n    accessToken:ACCESS_TOKEN\r\n})\r\n\r\nclass CourseList extends Component\r\n{\r\n    state=\r\n    {\r\n        courses:[],\r\n        searchString:''\r\n    }\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.getCourses()\r\n    }\r\n\r\n    getCourses=()=>\r\n    {\r\n        client.getEntries(\r\n            {\r\n                content_type:'course',\r\n                query: this.state.searchString\r\n            }\r\n        ).then((response)=>\r\n        {\r\n            this.setState({courses: response.items})\r\n        }).catch((error)=>\r\n        {\r\n            console.log(\"Error occured while fetching data\")\r\n            console.log(error)\r\n        })\r\n    }\r\n    onSearchInputChange = (event) =>\r\n    {\r\n        if(event.target.value)\r\n        {\r\n            this.setState({searchString: event.target.value})\r\n        }else\r\n        {\r\n            this.setState({searchString:''})\r\n        }\r\n        this.getCourses()\r\n    }\r\n    render()\r\n    {\r\n        return(\r\n            <div>{this.state.courses ? (\r\n                <div>\r\n                    <TextField style={{padding:24, width:\"90%\"}} id=\"searchInput\" placeholder =\"Search for Courses\" margin=\"normal\" onChange={this.onSearchInputChange}></TextField>\r\n                    <Grid container spacing={24} style={{padding:24}}>\r\n                        {this.state.courses.map(currentCourse => (\r\n                            <Grid item xs={12} sm={6} lg={4} xl={3}>\r\n                                <Course course={currentCourse} />\r\n                            </Grid>))\r\n                        }\r\n                    </Grid>\r\n                </div>\r\n            ):\"No courses found\"}</div>\r\n        );\r\n    }\r\n}\r\nexport default CourseList;","import React, { Component } from 'react'\r\nimport NavBar from './components/Nav'\r\nimport CourseList from './components/CourseList'\r\n\r\nexport class App1 extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n          <NavBar></NavBar>\r\n          <CourseList></CourseList>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App1\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App1';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}